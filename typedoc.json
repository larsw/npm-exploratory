{
	"id": 0,
	"name": "@larsw/exploratory2",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "asyncABC",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "A sample async function (to demo Typescript's es7 async/await down-leveling).",
				"text": "### Example (es imports)\n```js\nimport { asyncABC } from 'typescript-starter'\nconsole.log(await asyncABC())\n// => ['a','b','c']\n```\n\n### Example (commonjs)\n```js\nvar double = require('typescript-starter').asyncABC;\nasyncABC().then(console.log);\n// => ['a','b','c']\n```\n",
				"returns": "a Promise which should contain `['a','b','c']`\n"
			},
			"signatures": [
				{
					"id": 2,
					"name": "asyncABC",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A sample async function (to demo Typescript's es7 async/await down-leveling).",
						"text": "### Example (es imports)\n```js\nimport { asyncABC } from 'typescript-starter'\nconsole.log(await asyncABC())\n// => ['a','b','c']\n```\n\n### Example (commonjs)\n```js\nvar double = require('typescript-starter').asyncABC;\nasyncABC().then(console.log);\n// => ['a','b','c']\n```\n",
						"returns": "a Promise which should contain `['a','b','c']`\n"
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"name": "Promise"
					}
				}
			],
			"sources": [
				{
					"fileName": "lib/async.ts",
					"line": 20,
					"character": 21
				}
			]
		},
		{
			"id": 3,
			"name": "double",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Multiplies a value by 2. (Also a full example of TypeDoc's functionality.)",
				"text": "### Example (es module)\n```js\nimport { double } from 'typescript-starter'\nconsole.log(double(4))\n// => 8\n```\n\n### Example (commonjs)\n```js\nvar double = require('typescript-starter').double;\nconsole.log(double(4))\n// => 8\n```\n",
				"returns": "Comment describing the return type.",
				"tags": [
					{
						"tag": "anothernote",
						"text": "Some other value.\n"
					}
				]
			},
			"signatures": [
				{
					"id": 4,
					"name": "double",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Multiplies a value by 2. (Also a full example of TypeDoc's functionality.)",
						"text": "### Example (es module)\n```js\nimport { double } from 'typescript-starter'\nconsole.log(double(4))\n// => 8\n```\n\n### Example (commonjs)\n```js\nvar double = require('typescript-starter').double;\nconsole.log(double(4))\n// => 8\n```\n",
						"returns": "Comment describing the return type.",
						"tags": [
							{
								"tag": "anothernote",
								"text": "Some other value.\n"
							}
						]
					},
					"parameters": [
						{
							"id": 5,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Comment describing the `value` parameter."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "lib/number.ts",
					"line": 22,
					"character": 19
				}
			]
		},
		{
			"id": 6,
			"name": "power",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Raise the value of the first parameter to the power of the second using the\nes7 exponentiation operator (`**`).",
				"text": "### Example (es module)\n```js\nimport { power } from 'typescript-starter'\nconsole.log(power(2,3))\n// => 8\n```\n\n### Example (commonjs)\n```js\nvar power = require('typescript-starter').power;\nconsole.log(power(2,3))\n// => 8\n```"
			},
			"signatures": [
				{
					"id": 7,
					"name": "power",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Raise the value of the first parameter to the power of the second using the\nes7 exponentiation operator (`**`).",
						"text": "### Example (es module)\n```js\nimport { power } from 'typescript-starter'\nconsole.log(power(2,3))\n// => 8\n```\n\n### Example (commonjs)\n```js\nvar power = require('typescript-starter').power;\nconsole.log(power(2,3))\n// => 8\n```"
					},
					"parameters": [
						{
							"id": 8,
							"name": "base",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the base to exponentiate"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 9,
							"name": "exponent",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the power to which to raise the base\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "lib/number.ts",
					"line": 46,
					"character": 18
				}
			]
		}
	],
	"groups": [
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				1,
				3,
				6
			]
		}
	]
}